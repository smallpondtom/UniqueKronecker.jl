var documenterSearchIndex = {"docs":
[{"location":"uniquekronecker/basics/#Unique-Kronecker-Product","page":"Basics","title":"Unique Kronecker Product","text":"","category":"section"},{"location":"uniquekronecker/basics/#Introduction","page":"Basics","title":"Introduction","text":"","category":"section"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"The unique Kronecker product is a math operation which is similar to the Kronecker product but eliminates all the redundant terms appearing due to terms invariant under index permutations. This is easiest to understand through an example.","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"<img src=\"../../images/unique_kronecker_example.png\" alt=\"unique kronecker example\" style=\"float: left; margin-right: 10px;\" />","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"The example above shows the unique Kronecker product for a vector of mathbfxinmathbbR^3. For a standard Kronecker product the resulting vector becomes a 9-dimensional vector, and we have a 6-dimensional vector when using the unique Kronecker product. Which shows how the unique Kronecker product eliminates 3 of the redundant terms.","category":"page"},{"location":"uniquekronecker/basics/#Definitions","page":"Basics","title":"Definitions","text":"","category":"section"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"We define the basic syntax for the general Kronecker product and unique Kronecker product of order k as follows:","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"beginalign\n    mathbfx^k = underbracemathbfx otimes cdots otimes mathbfx_k-texttimes in mathbbR^n^k \n    mathbfx^langle k rangle = underbracemathbfx oslash cdots oslash mathbfx_k-texttimes in mathbbR^binomn+k-1k\nendalign","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"math","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"where mathbfxinmathbbR^n. From this definition, we observe that the dimensions of the Kronecker product grows in the order of n^k but the unique Kronecker grows in the order of binomn+k-1k. The reduction in computational cost from this order difference becomes significantly obvious in higher-dimensions. ","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"For a second-order Kronecker product, the package supports the following syntax","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"using UniqueKronecker\nn = 3\nx = rand(n)\nx2u = x ⊘ x  # or unique_kronecker(x,x)","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"for higher-order Kronecker products, you can do","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"using UniqueKronecker\nn = 3\nk = 5\nx = rand(n)\nxku = ⊘(x, k)","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"Another concept we need to define is the vectorization and half-vectorization operators mathrmvec(cdot) and mathrmvech(cdot), respectively. The vectorization operator flattens a matrix mathbfAinmathbbR^mtimes n in the column direction creating a vector of size mn. On the other hand, the half-vectorization operator vectorizes the matrix but only half of it or discarding the supradiagonal entries. These operations are strongly related to the second-order Kronecker and unique Kronecker products, and those relationships are described in the picture below.","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"<img src=\"../../images/vectorize_and_kronecker.png\" alt=\"unique kronecker example\" style=\"float: left; margin-right: 10px;\" />","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"The vectorization operator is already defined in the LinearAlgebra package as the function vec, but we define the functions vech for the half-vectorization operator and invec function for the inverse-vectorization operator that reverses the vectorization.","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"We are aware that similar concepts exists in the tensor algebra literature, and the vectorization and half-vectorization operations can be generalized to higher-order Kronecker products. However, for ease of exposition, we only illustrate the second-order Kronecker product case.","category":"page"},{"location":"uniquekronecker/basics/#Columnwise-Operation-on-Snapshot-Matrices","page":"Basics","title":"Columnwise Operation on Snapshot Matrices","text":"","category":"section"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"We also employ the functions ","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"kron_snapshot_matrix\nunique_kron_snapshot_matrix","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"which allows you to apply the Kronecker product and unique Kronecker product on each column of a matrix. For example","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"using UniqueKronecker\nX = [1 2; 3 4]\nX2 = kron_snapshot_matrix(X, 2)","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"using UniqueKronecker\nX = [1 2; 3 4]\nX2u = unique_kron_snapshot_matrix(X, 2)","category":"page"},{"location":"uniquekronecker/basics/","page":"Basics","title":"Basics","text":"unique_kronecker\n⊘\nkron_snapshot_matrix\nunique_kron_snapshot_matrix","category":"page"},{"location":"uniquekronecker/basics/#UniqueKronecker.unique_kronecker","page":"Basics","title":"UniqueKronecker.unique_kronecker","text":"unique_kronecker(x::AbstractVector{T}, y::AbstractVector{T}) where T\n\nUnique Kronecker product operation. For example, if\n\nx = y = beginbmatrix\n    1  \n    2\nendbmatrix\n\nthen\n\nmathrmuniquekronecker(x x) = beginbmatrix\n    1 \n    2 \n    4\nendbmatrix\n\nArguments\n\nx::AbstractVector{T}: vector to perform the unique Kronecker product\ny::AbstractVector{T}: vector to perform the unique Kronecker product\n\nReturns\n\nresult: unique Kronecker product\n\nNote\n\nThis implementation is faster than unique_kronecker_power for p = 2.\n\n\n\n\n\nunique_kronecker(x::AbstractVector{T}, y::AbstractVector{T}, z::AbstractVector{T}) where T\n\nUnique Kronecker product operation for triple Kronecker product.\n\nArguments\n\nx::AbstractVector{T}: vector to perform the unique Kronecker product\ny::AbstractVector{T}: vector to perform the unique Kronecker product\nz::AbstractVector{T}: vector to perform the unique Kronecker product\n\nReturns\n\nresult: unique Kronecker product\n\nNote\n\nThis implementation is faster than unique_kronecker_power for p = 3.\n\n\n\n\n\nunique_kronecker(x::AbstractVector{T}, y::AbstractVector{T}, z::AbstractVector{T}, w::AbstractVector{T}) where T\n\nUnique Kronecker product operation for quadruple Kronecker product.\n\nArguments\n\nx::AbstractVector{T}: vector to perform the unique Kronecker product\ny::AbstractVector{T}: vector to perform the unique Kronecker product\nz::AbstractVector{T}: vector to perform the unique Kronecker product\nw::AbstractVector{T}: vector to perform the unique Kronecker product\n\nReturns\n\nresult: unique Kronecker product\n\nNote\n\nThis implementation is faster than unique_kronecker_power for p = 4.\n\n\n\n\n\n","category":"function"},{"location":"uniquekronecker/basics/#UniqueKronecker.:⊘","page":"Basics","title":"UniqueKronecker.:⊘","text":"⊘(x::AbstractVector{T}, y::AbstractVector{T}) where T\n\nUnique Kronecker product operation\n\nArguments\n\nx::AbstractVector{T}: vector to perform the unique Kronecker product\ny::AbstractVector{T}: vector to perform the unique Kronecker product\n\nReturns\n\nunique Kronecker product\n\n\n\n\n\n⊘(x::AbstractArray{T}...) where {T<:Number}\n\nGeneralized Kronecker product operator for multiple vectors.\n\nArguments\n\nx::AbstractArray{T}...: one or more vectors to perform the unique Kronecker product\n\nReturns\n\nunique Kronecker product of all vectors\n\n\n\n\n\n","category":"function"},{"location":"uniquekronecker/basics/#UniqueKronecker.kron_snapshot_matrix","page":"Basics","title":"UniqueKronecker.kron_snapshot_matrix","text":"kron_snapshot_matrix(Xmat::AbstractArray{T}, p::Int) where {T<:Number}\n\nTake the p-order Kronecker product of each state of the snapshot matrix Xmat.\n\nArguments\n\nXmat::AbstractArray{T}: state snapshot matrix\np::Int: order of the Kronecker product\n\nReturns\n\nkronecker product state snapshot matrix\n\n\n\n\n\n","category":"function"},{"location":"uniquekronecker/basics/#UniqueKronecker.unique_kron_snapshot_matrix","page":"Basics","title":"UniqueKronecker.unique_kron_snapshot_matrix","text":"unique_kron_snapshot_matrix(Xmat::AbstractArray{T}, p::Int) where {T<:Number}\n\nTake the p-order unique Kronecker product of each state of the snapshot matrix Xmat.\n\nArguments\n\nXmat::AbstractArray{T}: state snapshot matrix\np::Int: order of the Kronecker product\n\nReturns\n\nunique kronecker product state snapshot matrix\n\n\n\n\n\n","category":"function"},{"location":"matrices/elimination/#Elimination-Matrix","page":"Elimination Matrix","title":"Elimination Matrix","text":"","category":"section"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Elimination matrix mathbfL, first mentioned by Tracy and Singh (1972) and later by Vetter (1975), was studied in depth by Magnus and Neudecker in Magnus and Neudecker [1]. This matrix holds properties that are crucial to converting the standard Kronecker product vector to the unique Kronecker product vector as well as converting the non-redundant polynomial operators to the redundant operators.","category":"page"},{"location":"matrices/elimination/#Definition","page":"Elimination Matrix","title":"Definition","text":"","category":"section"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"The elimination matrix mathbfL_n is a unique matrix of size left(tfracn(n+1)2 times n^2right) that extracts the unique elements from the vectorization of a symmetric matrix. For any symmetric matrix mathbfS in mathbbR^n times n, the vectorization mathrmvec(mathbfS) contains redundant elements due to symmetry. The elimination matrix mathbfL_n is defined such that:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"    mathrmvech(mathbfS) = mathbfL_n mathrmvec(mathbfS)","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"where:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"operator mathrmvec(mathbfS) stacks all columns of mathbfS into a single vector of length n^2.\nand mathrmvech(mathbfS) stacks only the elements on and below (or above) the main diagonal into a vector of length tfracn(n+1)2.","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"The elimination matrix effectively \"eliminates\" the redundant elements in mathrmvec(mathbfS), preserving only the unique components.","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Properties of the Elimination Matrix:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Idempotency: mathbfL_n mathbfL_n^top is an idempotent matrix, meaning (mathbfL_n mathbfL_n^top)^2 = mathbfL_n mathbfL_n^top.\nConstruction: Each row of mathbfL_n contains a single one and zeros elsewhere, mapping elements from mathrmvec(mathbfS) to mathrmvech(mathbfS).","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"note: Note\nUnfortunately, the definition of the elimination matrix is not formally/mathematically defined for Kronecker products beyond the order of 2. However, implementation-wise, this package has generalized the matrix.","category":"page"},{"location":"matrices/elimination/#Converting-Between-Kronecker-Products","page":"Elimination Matrix","title":"Converting Between Kronecker Products","text":"","category":"section"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"In polynomial dynamical systems, we often deal with Kronecker powers of vectors, which can be redundant due to symmetric terms. The elimination matrix facilitates the conversion between the standard Kronecker product vector and the unique Kronecker product vector.","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Standard Kronecker Power:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Given a vector mathbfx in mathbbR^n, the k-th order Kronecker power is:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"    mathbfx^k = underbracemathbfx otimes mathbfx otimes cdots otimes mathbfx_k text times in mathbbR^n^k","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Unique Kronecker Power:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"The unique Kronecker power, denoted by mathbfx^langle k rangle, contains only the unique monomials of degree k formed from the elements of mathbfx. It has a length of tbinomn + k - 1k.","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Conversion Using the Elimination Matrix:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"The relationship between the standard and unique Kronecker powers is given by:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"    mathbfx^langle k rangle = mathbfL_nk mathbfx^k","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"where mathbfL_nk is the elimination matrix corresponding to the k-th Kronecker power, of size left(tbinomn + k - 1k times n^kright).","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Example:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"For n = 2 and k = 2, let mathbfx = x_1 x_2^top. Then:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Standard Kronecker Power:\n    mathbfx^2 = x_1^2 x_1 x_2 x_2 x_1 x_2^2^top\nUnique Kronecker Power:\n    mathbfx^langle 2 rangle = x_1^2 x_1 x_2 x_2^2^top","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"The elimination matrix mathbfL_22 maps mathbfx^2 to mathbfx^langle 2 rangle by combining redundant terms (since x_1 x_2 and x_2 x_1 are the same):","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"    mathbfx^langle 2 rangle = mathbfL_22 mathbfx^2","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"elimat","category":"page"},{"location":"matrices/elimination/#UniqueKronecker.elimat","page":"Elimination Matrix","title":"UniqueKronecker.elimat","text":"elimat(n::Int, p::Int) -> Lp::SparseMatrixCSC{Int}\n\nCreate an elimination matrix of order p for a vector of length n Magnus and Neudecker [1].\n\nArguments\n\nn::Int: The length of the vector.\np::Int: The order of the elimination matrix, e.g., p = 2 for x ⊗ x.\n\nOutput\n\nLp::SparseMatrixCSC{Int}: The elimination matrix of order p.\n\nExample\n\njulia> elimat(2,2)\n3×4 SparseMatrixCSC{Int64, Int64} with 3 stored entries:\n 1  ⋅  ⋅  ⋅\n ⋅  1  ⋅  ⋅\n ⋅  ⋅  ⋅  1\n\n\n\n\n\n","category":"function"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Benefits:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Efficiency: Reduces computational complexity by working with smaller vectors.\nSimplicity: Simplifies expressions and computations involving symmetric terms.\nClarity: Makes the structure of polynomial terms more transparent.","category":"page"},{"location":"matrices/elimination/#Converting-Between-Operators","page":"Elimination Matrix","title":"Converting Between Operators","text":"","category":"section"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"The elimination matrix also plays a crucial role in converting between redundant and non-redundant polynomial operators in dynamical systems.","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Redundant Operators:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"In the polynomial system:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"    dotmathbfx(t) = mathbfAmathbfx(t) + mathbfA_2 mathbfx^2(t) + mathbfA_3 mathbfx^3(t) + cdots","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"the matrices mathbfA_k in mathbbR^n times n^k operate on the full Kronecker powers, which include redundant terms.","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Unique Operators:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"To eliminate redundancy, we define unique operators mathbfA_ku in mathbbR^n times tbinomn + k - 1k such that:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"    dotmathbfx(t) = mathbfAmathbfx(t) + mathbfA_2u mathbfx^langle 2 rangle(t) + mathbfA_3u mathbfx^langle 3 rangle(t) + cdots","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Conversion Using the Elimination Matrix:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"The redundant operator mathbfA_k and the unique operator mathbfA_ku are related through the elimination matrix:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"    mathbfA_k = mathbfA_ku mathbfL_nk","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"which actually works to duplicate the entries of the non-redundant operator. Thus, though seemingly counter-intuitive, the elimination matrix duplicates the entries and constructs to convert the mathbfA_2 matrix to the mathbfA_2u matrix.","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Example:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Consider a system with n = 2:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"Redundant operator: mathbfA_2 in mathbbR^2 times 4\nUnique operator: mathbfA_2u in mathbbR^2 times 3","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"The elimination matrix mathbfL_22 maps mathbfx^2 to mathbfx^langle 2 rangle:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"    mathbfx^langle 2 rangle = mathbfL_22 mathbfx^2","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"The operators are related by:","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"    mathbfA_2u = mathbfA_2 mathbfL_22^top","category":"page"},{"location":"matrices/elimination/","page":"Elimination Matrix","title":"Elimination Matrix","text":"duplicate","category":"page"},{"location":"matrices/elimination/#UniqueKronecker.duplicate","page":"Elimination Matrix","title":"UniqueKronecker.duplicate","text":"duplicate(A::AbstractArray)\n\nDuplicate the redundant polynomial coefficients in the matrix A with a unique set of coefficients and return the matrix with redundant coefficients.\n\nArguments\n\nA::AbstractArray: A matrix\np::Int: The order of the polynomial, e.g., p = 2 for x ⊗ x.\n\nReturns\n\nmatrix with redundant coefficients\n\nExample\n\njulia> n = 2; P = rand(n,n); P *= P'; p = vec(P)\n4-element Vector{Float64}:\n 0.5085988756090203\n 0.7704767970682769\n 0.7704767970682769\n 1.310279680309927\n\njulia> Q = rand(n,n); Q *= Q'; q = vec(Q)\n4-element Vector{Float64}:\n 0.40940214810208353\n 0.2295272821417254\n 0.2295272821417254\n 0.25503767587483905\n\njulia> A2 = [p'; q']\n2×4 Matrix{Float64}:\n 0.257622  0.44721   0.0202203  0.247649\n 1.55077   0.871029  0.958499   0.650717\n\njulia> D2 = dupmat(2,2)\n4×3 SparseMatrixCSC{Int64, Int64} with 4 stored entries:\n 1  ⋅  ⋅\n ⋅  1  ⋅\n ⋅  1  ⋅\n ⋅  ⋅  1\n\njulia> A2 * D2\n2×3 Matrix{Float64}:\n 0.508599  1.54095   1.31028\n 0.409402  0.459055  0.255038\n\njulia> duplicate(A2 * D2, 2)\n2×4 Matrix{Float64}:\n 0.508599  1.54095   0.0  1.31028\n 0.409402  0.459055  0.0  0.255038\n\n\n\n\n\n","category":"function"},{"location":"paper/#Paper","page":"Paper Reference","title":"Paper","text":"","category":"section"},{"location":"paper/","page":"Paper Reference","title":"Paper Reference","text":"Below you have a list of publications referenced in this work.","category":"page"},{"location":"paper/","page":"Paper Reference","title":"Paper Reference","text":"J. R. Magnus and H. Neudecker. The Elimination Matrix: Some Lemmas and Applications. SIAM Journal on Algebraic Discrete Methods 1, 422–449 (1980).\n\n\n\n","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"CurrentModule = UniqueKronecker ","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#API","page":"API Reference","title":"API","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"All APIs of UniqueKronecker listed in a unstructured manner.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [UniqueKronecker]\nOrder = [:module, :function, :macro]","category":"page"},{"location":"api/#Base.iterate-Tuple{UniqueKronecker.UniqueCombinationIterator, Vector{Int64}}","page":"API Reference","title":"Base.iterate","text":"Base.iterate(it::UniqueCombinationIterator, comb::Vector{Int})\n\nIterate over all combinations with repetition of n elements from {1, 2, ..., n}.\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.:⊘-Union{Tuple{T}, Tuple{AbstractArray{T, N} where N, AbstractArray{T, N} where N}} where T","page":"API Reference","title":"UniqueKronecker.:⊘","text":"⊘(x::AbstractVector{T}, y::AbstractVector{T}) where T\n\nUnique Kronecker product operation\n\nArguments\n\nx::AbstractVector{T}: vector to perform the unique Kronecker product\ny::AbstractVector{T}: vector to perform the unique Kronecker product\n\nReturns\n\nunique Kronecker product\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.:⊘-Union{Tuple{T}, Tuple{AbstractArray{T, N} where N, Int64}} where T<:Number","page":"API Reference","title":"UniqueKronecker.:⊘","text":"⊘(x::AbstractArray{T}...) where {T<:Number}\n\nGeneralized Kronecker product operator for multiple vectors.\n\nArguments\n\nx::AbstractArray{T}...: one or more vectors to perform the unique Kronecker product\n\nReturns\n\nunique Kronecker product of all vectors\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.:⊛-Tuple","page":"API Reference","title":"UniqueKronecker.:⊛","text":"⊛(args::AbstractArray...)\n\nCirculant Kronecker product operator for multiple arguments.\n\nArguments\n\nargs::AbstractArray...: Vectors or matrices to perform the circulant Kronecker product.\n\nReturns\n\nresult: The circulant Kronecker product.\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.H2Q-Tuple{AbstractArray}","page":"API Reference","title":"UniqueKronecker.H2Q","text":"H2Q(H::AbstractArray) → Q\n\nConvert the quadratic H operator into the Q operator\n\nArguments\n\nH::AbstractArray: Quadratic matrix of dimensions (n x n^2)\n\nReturns\n\nthe Q quadratic matrix of 3-dim tensor\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.Q2H-Tuple{AbstractArray}","page":"API Reference","title":"UniqueKronecker.Q2H","text":"Q2H(Q::AbstractArray) → H\n\nConvert the quadratic Q operator into the H operator. The Q matrix is  a 3-dim tensor with dimensions (n x n x n). Thus,\n\nmathbfQ = beginbmatrix \n    mathbfQ_1  \n    mathbfQ_2  \n    vdots  \n    mathbfQ_n \nendbmatrix\nquad textwhere  mathbfQ_i in mathbbR^n times n\n\nArguments\n\nQ::AbstractArray: Quadratic matrix in the 3-dim tensor form with dimensions (n x n x n)\n\nReturns\n\nthe H quadratic matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.circulant_kron_snapshot_matrix-Union{Tuple{Vararg{AbstractArray{T, N} where N, N} where N}, Tuple{T}} where T<:Number","page":"API Reference","title":"UniqueKronecker.circulant_kron_snapshot_matrix","text":"circulant_kron_snapshot_matrix(Xmat::AbstractArray{T}...) where {T<:Number}\n\nCompute the circulant Kronecker product of a set of matrices, where each matrix is a snapshot matrix.\n\nArguments\n\nXmat::AbstractArray{T}...: Snapshot matrices to compute the circulant Kronecker product.\n\nReturns\n\nresult: The circulant Kronecker product of the snapshot matrices.\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.circulant_kronecker-Tuple{Vararg{AbstractArray, N} where N}","page":"API Reference","title":"UniqueKronecker.circulant_kronecker","text":"circulant_kronecker(args::AbstractArray...)\n\nCirculant Kronecker product operation for multiple Kronecker products.\n\nArguments\n\nargs::AbstractArray...: Vectors or matrices to perform the circulant Kronecker product.\n\nReturns\n\nresult: The circulant Kronecker product.\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.commat-Tuple{Int64, Int64}","page":"API Reference","title":"UniqueKronecker.commat","text":"commat(m::Int, n::Int) → K\n\nCreate commutation matrix K of dimension m x n Magnus and Neudecker [1].\n\nArguments\n\nm::Int: row dimension of the commutation matrix\nn::Int: column dimension of the commutation matrix\n\nReturns\n\nK: commutation matrix\n\nExample\n\njulia> commat(2,2)\n4×4 SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n 1.0   ⋅    ⋅    ⋅\n  ⋅    ⋅   1.0   ⋅\n  ⋅   1.0   ⋅    ⋅ \n  ⋅    ⋅    ⋅   1.0\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.commat-Tuple{Int64}","page":"API Reference","title":"UniqueKronecker.commat","text":"commat(m::Int) → K\n\nDispatch for the commutation matrix of dimensions (m, m)\n\nArguments\n\nm::Int: row and column dimension of the commutation matrix\n\nReturns\n\nK: commutation matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.duplicate-Tuple{AbstractArray, Int64}","page":"API Reference","title":"UniqueKronecker.duplicate","text":"duplicate(A::AbstractArray)\n\nDuplicate the redundant polynomial coefficients in the matrix A with a unique set of coefficients and return the matrix with redundant coefficients.\n\nArguments\n\nA::AbstractArray: A matrix\np::Int: The order of the polynomial, e.g., p = 2 for x ⊗ x.\n\nReturns\n\nmatrix with redundant coefficients\n\nExample\n\njulia> n = 2; P = rand(n,n); P *= P'; p = vec(P)\n4-element Vector{Float64}:\n 0.5085988756090203\n 0.7704767970682769\n 0.7704767970682769\n 1.310279680309927\n\njulia> Q = rand(n,n); Q *= Q'; q = vec(Q)\n4-element Vector{Float64}:\n 0.40940214810208353\n 0.2295272821417254\n 0.2295272821417254\n 0.25503767587483905\n\njulia> A2 = [p'; q']\n2×4 Matrix{Float64}:\n 0.257622  0.44721   0.0202203  0.247649\n 1.55077   0.871029  0.958499   0.650717\n\njulia> D2 = dupmat(2,2)\n4×3 SparseMatrixCSC{Int64, Int64} with 4 stored entries:\n 1  ⋅  ⋅\n ⋅  1  ⋅\n ⋅  1  ⋅\n ⋅  ⋅  1\n\njulia> A2 * D2\n2×3 Matrix{Float64}:\n 0.508599  1.54095   1.31028\n 0.409402  0.459055  0.255038\n\njulia> duplicate(A2 * D2, 2)\n2×4 Matrix{Float64}:\n 0.508599  1.54095   0.0  1.31028\n 0.409402  0.459055  0.0  0.255038\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.duplicate_symmetric-Tuple{AbstractArray, Int64}","page":"API Reference","title":"UniqueKronecker.duplicate_symmetric","text":"duplicate_symmetric(A::AbstractArray, p::Int)\n\nDuplicate the redundant polynomial coefficients in the matrix A with a unique set of coefficients and return the matrix with redundant coefficients which are duplicated symmetrically. This guarantees that the operator is symmetric. The difference from duplicate is that we use the elimination matrix Lp and the symmetric commutation matrix Sp to multiply the A matrix.\n\nArguments\n\nA::AbstractArray: A matrix\np::Int: The order of the polynomial, e.g., p = 2 for x ⊗ x.\n\nReturns\n\nmatrix with redundant coefficients duplicated symmetrically\n\nExample\n\n```julia-repl julia> n = 2; P = rand(n,n); P *= P'; p = vec(P) 4-element Vector{Float64}:  0.5085988756090203  0.7704767970682769  0.7704767970682769  1.310279680309927\n\njulia> Q = rand(n,n); Q *= Q'; q = vec(Q) 4-element Vector{Float64}:  0.40940214810208353  0.2295272821417254  0.2295272821417254  0.25503767587483905\n\njulia> A2 = [p'; q'] 2×4 Matrix{Float64}:  0.257622  0.44721   0.0202203  0.247649  1.55077   0.871029  0.958499   0.650717\n\njulia> D2 = dupmat(2,2) 4×3 SparseMatrixCSC{Int64, Int64} with 4 stored entries:  1  ⋅  ⋅  ⋅  1  ⋅  ⋅  1  ⋅  ⋅  ⋅  1\n\njulia> A2 * D2 2×3 Matrix{Float64}:  0.508599  1.54095   1.31028  0.409402  0.459055  0.255038\n\njulia> duplicate_symmetric(A2 * D2, 2) 2×4 Matrix{Float64}:  0.508599  0.770477  0.770477  1.31028  0.409402  0.229527  0.229527  0.255038 ````\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.dupmat-Tuple{Int64, Int64}","page":"API Reference","title":"UniqueKronecker.dupmat","text":"dupmat(n::Int, p::Int) -> Dp::SparseMatrixCSC{Int}\n\nCreate a duplication matrix of order p for a vector of length n Magnus and Neudecker [1].\n\nArguments\n\nn::Int: The length of the vector.\np::Int: The order of the duplication matrix, e.g., p = 2 for x ⊗ x.\n\nOutput\n\nDp::SparseMatrixCSC{Int}: The duplication matrix of order p.\n\nExample\n\njulia> dupmat(2,2)\n4×3 SparseMatrixCSC{Int64, Int64} with 4 stored entries:\n 1  ⋅  ⋅\n ⋅  1  ⋅\n ⋅  1  ⋅\n ⋅  ⋅  1\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.elimat-Tuple{Int64, Int64}","page":"API Reference","title":"UniqueKronecker.elimat","text":"elimat(n::Int, p::Int) -> Lp::SparseMatrixCSC{Int}\n\nCreate an elimination matrix of order p for a vector of length n Magnus and Neudecker [1].\n\nArguments\n\nn::Int: The length of the vector.\np::Int: The order of the elimination matrix, e.g., p = 2 for x ⊗ x.\n\nOutput\n\nLp::SparseMatrixCSC{Int}: The elimination matrix of order p.\n\nExample\n\njulia> elimat(2,2)\n3×4 SparseMatrixCSC{Int64, Int64} with 3 stored entries:\n 1  ⋅  ⋅  ⋅\n ⋅  1  ⋅  ⋅\n ⋅  ⋅  ⋅  1\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.eliminate-Tuple{AbstractArray, Int64}","page":"API Reference","title":"UniqueKronecker.eliminate","text":"eliminate(A::AbstractArray, p::Int)\n\nEliminate the redundant polynomial coefficients in the matrix A and return the matrix  with unique coefficients.\n\nArguments\n\nA::AbstractArray: A matrix\np::Int: The order of the polynomial, e.g., p = 2 for x ⊗ x.\n\nReturns\n\nmatrix with unique coefficients\n\nExample\n\njulia> n = 2; P = rand(n,n); P *= P'; p = vec(P)\n4-element Vector{Float64}:\n 0.5085988756090203\n 0.7704767970682769\n 0.7704767970682769\n 1.310279680309927\n\njulia> Q = rand(n,n); Q *= Q'; q = vec(Q)\n4-element Vector{Float64}:\n 0.40940214810208353\n 0.2295272821417254\n 0.2295272821417254\n 0.25503767587483905\n\njulia> A2 = [p'; q']\n2×4 Matrix{Float64}:\n 0.257622  0.44721   0.0202203  0.247649\n 1.55077   0.871029  0.958499   0.650717\n\njulia> eliminate(A2, 2)\n2×3 Matrix{Float64}:\n 0.508599  1.54095   1.31028\n 0.409402  0.459055  0.255038\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.extractF-Tuple{Any, Any}","page":"API Reference","title":"UniqueKronecker.extractF","text":"extractF(F::Union{SparseMatrixCSC,VecOrMat}, r::Int) → F\n\nExtracting the F matrix for POD basis of dimensions (N, r)\n\nArguments\n\nF: F matrix\nr: reduced order\n\nReturns\n\nextracted F matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.extractH-Tuple{Any, Any}","page":"API Reference","title":"UniqueKronecker.extractH","text":"extractH(H::Union{SparseMatrixCSC,VecOrMat}, r::Int) → H\n\nExtracting the H matrix for POD basis of dimensions (N, r)\n\nArguments\n\nH: H matrix\nr: reduced order\n\nReturns\n\nextracted H matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.insert2F-Tuple{Any, Any}","page":"API Reference","title":"UniqueKronecker.insert2F","text":"insertF(Fi::Union{SparseMatrixCSC,VecOrMat}, N::Int) → F\n\nInserting values into the F matrix for higher dimensions\n\nArguments\n\nFi: F matrix to insert\nN: the larger order\n\nReturns\n\ninserted F matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.insert2H-Tuple{Any, Any}","page":"API Reference","title":"UniqueKronecker.insert2H","text":"insertH(Hi::Union{SparseMatrixCSC,VecOrMat}, N::Int) → H\n\nInserting values into the H matrix for higher dimensions\n\nArguments\n\nHi: H matrix to insert\nN: the larger order\n\nReturns\n\ninserted H matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.insert2bilin-Tuple{Any, Any, Any}","page":"API Reference","title":"UniqueKronecker.insert2bilin","text":"insert2bilin(X::Union{SparseMatrixCSC,VecOrMat}, N::Int, p::Int) → BL\n\nInserting the values into the bilinear matrix (N) for higher dimensions\n\nArguments\n\nX: bilinear matrix to insert\nN: the larger order\n\nReturns\n\nInserted bilinear matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.insert2randF-Tuple{Any, Any}","page":"API Reference","title":"UniqueKronecker.insert2randF","text":"insert2randF(Fi::Union{SparseMatrixCSC,VecOrMat}, N::Int) → F\n\nInserting values into the F matrix for higher dimensions\n\nArguments\n\nFi: F matrix to insert\nN: the larger order\n\nReturns\n\ninserted F matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.invec-Tuple{AbstractArray, Int64, Int64}","page":"API Reference","title":"UniqueKronecker.invec","text":"invec(r::AbstractArray, m::Int, n::Int) → r\n\nInverse vectorization.\n\nArguments\n\nr::AbstractArray: the input vector\nm::Int: the row dimension\nn::Int: the column dimension\n\nReturns\n\nthe inverse vectorized matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.kron_snapshot_matrix-Union{Tuple{T}, Tuple{AbstractArray{T, N} where N, Int64}} where T<:Number","page":"API Reference","title":"UniqueKronecker.kron_snapshot_matrix","text":"kron_snapshot_matrix(Xmat::AbstractArray{T}, p::Int) where {T<:Number}\n\nTake the p-order Kronecker product of each state of the snapshot matrix Xmat.\n\nArguments\n\nXmat::AbstractArray{T}: state snapshot matrix\np::Int: order of the Kronecker product\n\nReturns\n\nkronecker product state snapshot matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.makeCubicOp-Tuple{Int64, AbstractArray{NTuple{4, Int64}, N} where N, AbstractArray{var\"#s30\", N} where {var\"#s30\"<:Real, N}}","page":"API Reference","title":"UniqueKronecker.makeCubicOp","text":"makeCubicOp(n::Int, inds::AbstractArray{Tuple{Int,Int,Int,Int}}, vals::AbstractArray{Real}, \nwhich_cubic_term::Union{String,Char}=\"G\") → G or E\n\nHelper function to construct the cubic operator from the indices and values. The indices must be a 1-dimensional array of tuples of the form (i,j,k,l) where i,j,k,l are the indices of the cubic term. For example, for the cubic term 25x_1x_2x_3 for dotx_4 would have an index of (1,2,3,4) with a value of 2.5. The which_cubic_term argument specifies which cubic term to construct (the redundant or non-redundant operator). Note that the values must be a  1-dimensional array of the same length as the indices.\n\nArguments\n\nn::Int: dimension of the cubic operator\ninds::AbstractArray{Tuple{Int,Int,Int,Int}}: indices of the cubic term\nvals::AbstractArray{Real}: values of the cubic term\nwhich_cubic_term::Union{String,Char}=\"G\": which cubic term to construct \"G\" or \"E\"\nsymmetric::Bool=true: whether to construct the symmetric G matrix\n\nReturns\n\nthe cubic operator\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.makeIdentityCubicOp-Tuple{Int64}","page":"API Reference","title":"UniqueKronecker.makeIdentityCubicOp","text":"makeIdentityCubicOp(n::Int, which_cubic_term::Union{String,Char}=\"G\") → G or E\n\nHelper function to construct the identity cubic operator.\n\nArguments\n\nn::Int: dimension of the cubic operator\nwhich_cubic_term::Union{String,Char}=\"G\": which cubic term to construct \"G\" or \"E\"\n\nReturns\n\nthe identity cubic operator\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.makePolyOp-Union{Tuple{P}, Tuple{Int64, AbstractArray{var\"#s34\", N} where {var\"#s34\"<:(Tuple{Vararg{var\"#s35\", P}} where var\"#s35\"<:Int64), N}, AbstractArray{var\"#s36\", N} where {var\"#s36\"<:Real, N}}} where P","page":"API Reference","title":"UniqueKronecker.makePolyOp","text":"makePolyOp(n::Int, inds::AbstractArray{<:NTuple{P,<:Int}}, vals::AbstractArray{<:Real}; \n                nonredundant::Bool=true, symmetric::Bool=true) where P\n\nHelper function to construct the polynomial operator from the indices and values. The indices must be a 1-dimensional array of, e.g., tuples of the form (i,j) where i,j are the indices of the polynomial term. For example, for the polynomial term 25x_1x_2 for dotx_3 would have an index of (1,2,3) with a value of 2.5. The nonredundant argument specifies which polynomial operator to construct (the redundant or non-redundant operator). Note that the values must be a 1-dimensional array of the same length as the indices. The symmetric argument specifies whether to construct the operator with symmetric coefficients.\n\nArguments\n\nn::Int: dimension of the polynomial operator\ninds::AbstractArray{<:NTuple{P,<:Int}}: indices of the polynomial term\nvals::AbstractArray{<:Real}: values of the polynomial term\nnonredundant::Bool=true: whether to construct the non-redundant operator\nsymmetric::Bool=true: whether to construct the symmetric operator\n\nReturns\n\nthe polynomial operator\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.makeQuadOp-Tuple{Int64, AbstractArray{Tuple{Int64, Int64, Int64}, N} where N, AbstractArray{var\"#s31\", N} where {var\"#s31\"<:Real, N}}","page":"API Reference","title":"UniqueKronecker.makeQuadOp","text":"makeQuadOp(n::Int, inds::AbstractArray{Tuple{Int,Int,Int}}, vals::AbstractArray{Real}, \nwhich_quad_term::Union{String,Char}=\"H\") → H or F or Q\n\nHelper function to construct the quadratic operator from the indices and values. The indices must be a 1-dimensional array of tuples of the form (i,j,k) where i,j,k are the indices of the quadratic term. For example, for the quadratic term 25x_1x_2 for dotx_3 would have an  index of (1,2,3) with a value of 2.5. The which_quad_term argument specifies which quadratic term to construct. Note that the values must be a 1-dimensional array of the same length as the indices.\n\nArguments\n\nn::Int: dimension of the quadratic operator\ninds::AbstractArray{Tuple{Int,Int,Int}}: indices of the quadratic term\nvals::AbstractArray{Real}: values of the quadratic term\nwhich_quad_term::Union{String,Char}=\"H\": which quadratic term to construct\nsymmetric::Bool=true: whether to construct the symmetric H or Q matrix\n\nReturns\n\nthe quadratic operator\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.symmtzrmat-Tuple{Int64, Int64}","page":"API Reference","title":"UniqueKronecker.symmtzrmat","text":"symmtzrmat(n::Int, p::Int) -> Sp::SparseMatrixCSC{Float64}\n\nCreate a symmetrizer matrix of order p for a vector of length n Magnus and Neudecker [1].\n\nArguments\n\nn::Int: The length of the vector.\np::Int: The order of the symmetrizer matrix, e.g., p = 2 for x ⊗ x.\n\nOutput\n\nSp::SparseMatrixCSC{Float64}: The symmetrizer matrix of order p.\n\nExample\n\njulia> symmtzrmat(2,2)\n4×4 SparseMatrixCSC{Float64, Int64} with 6 stored entries:\n 1.0   ⋅    ⋅    ⋅ \n  ⋅   0.5  0.5   ⋅\n  ⋅   0.5  0.5   ⋅\n  ⋅    ⋅    ⋅   1.0\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.unique_kron_snapshot_matrix-Union{Tuple{T}, Tuple{AbstractArray{T, N} where N, Int64}} where T<:Number","page":"API Reference","title":"UniqueKronecker.unique_kron_snapshot_matrix","text":"unique_kron_snapshot_matrix(Xmat::AbstractArray{T}, p::Int) where {T<:Number}\n\nTake the p-order unique Kronecker product of each state of the snapshot matrix Xmat.\n\nArguments\n\nXmat::AbstractArray{T}: state snapshot matrix\np::Int: order of the Kronecker product\n\nReturns\n\nunique kronecker product state snapshot matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.unique_kronecker-Union{Tuple{T}, NTuple{4, AbstractArray{T, N} where N}} where T","page":"API Reference","title":"UniqueKronecker.unique_kronecker","text":"unique_kronecker(x::AbstractVector{T}, y::AbstractVector{T}, z::AbstractVector{T}, w::AbstractVector{T}) where T\n\nUnique Kronecker product operation for quadruple Kronecker product.\n\nArguments\n\nx::AbstractVector{T}: vector to perform the unique Kronecker product\ny::AbstractVector{T}: vector to perform the unique Kronecker product\nz::AbstractVector{T}: vector to perform the unique Kronecker product\nw::AbstractVector{T}: vector to perform the unique Kronecker product\n\nReturns\n\nresult: unique Kronecker product\n\nNote\n\nThis implementation is faster than unique_kronecker_power for p = 4.\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.unique_kronecker-Union{Tuple{T}, Tuple{AbstractArray{T, N} where N, AbstractArray{T, N} where N, AbstractArray{T, N} where N}} where T","page":"API Reference","title":"UniqueKronecker.unique_kronecker","text":"unique_kronecker(x::AbstractVector{T}, y::AbstractVector{T}, z::AbstractVector{T}) where T\n\nUnique Kronecker product operation for triple Kronecker product.\n\nArguments\n\nx::AbstractVector{T}: vector to perform the unique Kronecker product\ny::AbstractVector{T}: vector to perform the unique Kronecker product\nz::AbstractVector{T}: vector to perform the unique Kronecker product\n\nReturns\n\nresult: unique Kronecker product\n\nNote\n\nThis implementation is faster than unique_kronecker_power for p = 3.\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.unique_kronecker-Union{Tuple{T}, Tuple{AbstractArray{T, N} where N, AbstractArray{T, N} where N}} where T","page":"API Reference","title":"UniqueKronecker.unique_kronecker","text":"unique_kronecker(x::AbstractVector{T}, y::AbstractVector{T}) where T\n\nUnique Kronecker product operation. For example, if\n\nx = y = beginbmatrix\n    1  \n    2\nendbmatrix\n\nthen\n\nmathrmuniquekronecker(x x) = beginbmatrix\n    1 \n    2 \n    4\nendbmatrix\n\nArguments\n\nx::AbstractVector{T}: vector to perform the unique Kronecker product\ny::AbstractVector{T}: vector to perform the unique Kronecker product\n\nReturns\n\nresult: unique Kronecker product\n\nNote\n\nThis implementation is faster than unique_kronecker_power for p = 2.\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.unique_kronecker_power-Union{Tuple{T}, Tuple{Union{AbstractArray{T, N} where N, T}, Int64}} where T<:Number","page":"API Reference","title":"UniqueKronecker.unique_kronecker_power","text":"unique_kronecker_power(x::AbstractArray{T}, p::Int) where T\n\nUnique Kronecker product operation generalized for power p.\n\nArguments\n\nx::Union{T,AbstractArray{T}}: vector (or scalar) to perform the unique Kronecker product\np::Int: power of the unique Kronecker product\n\nReturns\n\nresult: unique Kronecker product\n\n\n\n\n\n","category":"method"},{"location":"api/#UniqueKronecker.vech-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T","page":"API Reference","title":"UniqueKronecker.vech","text":"vech(A::AbstractMatrix{T}) → v\n\nHalf-vectorization operation. For example half-vectorzation of\n\nA = beginbmatrix\n    a_11  a_12  \n    a_21  a_22\nendbmatrix\n\nbecomes\n\nv = beginbmatrix\n    a_11 \n    a_21 \n    a_22\nendbmatrix\n\nArguments\n\nA: matrix to half-vectorize\n\nReturns\n\nv: half-vectorized form\n\n\n\n\n\n","category":"method"},{"location":"matrices/symmetrizer/#Symmetrizer-Matrix","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"","category":"section"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"The symmetrizer matrix mathbfS is a matrix that symmetrizes tensors or higher-order Kronecker products. It ensures that the resulting product is symmetric with respect to its indices. In the context of polynomial dynamical systems and Kronecker products, the symmetrizer matrix is crucial for handling symmetric terms efficiently and accurately.","category":"page"},{"location":"matrices/symmetrizer/#Definition","page":"Symmetrizer Matrix","title":"Definition","text":"","category":"section"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"The Symmetrizer Matrix mathbfS_np in mathbbR^n^p times n^p of order p for a vector of length n is defined such that it symmetrizes a tensor obtained from the p-th Kronecker power of a vector mathbfx in mathbbR^n.","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"Given the p-th Kronecker power:","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"mathbfx^p = underbracemathbfx otimes mathbfx otimes cdots otimes mathbfx_p text times in mathbbR^n^p","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"The symmetrizer matrix mathbfS_np symmetrizes mathbfx^p to produce a vector where all permutations of indices are averaged. The symmetrized vector is:","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"mathbfx^p = mathbfS_np mathbfx^p","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"Properties of the Symmetrizer Matrix:","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"Idempotent: mathbfS_np^2 = mathbfS_np.\nSymmetric: mathbfS_np^top = mathbfS_np.\nProjection Matrix: It projects any tensor onto the space of symmetric tensors.","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"For the quadratic case (p = 2), the symmetrizer matrix can be explicitly defined using the commutation matrix mathbfK_nn:","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"mathbfS_n2 = frac12 left( mathbfI_n^2 + mathbfK_nn right)","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"where mathbfI_n^2 is the identity matrix of size n^2 times n^2.","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"symmtzrmat","category":"page"},{"location":"matrices/symmetrizer/#UniqueKronecker.symmtzrmat","page":"Symmetrizer Matrix","title":"UniqueKronecker.symmtzrmat","text":"symmtzrmat(n::Int, p::Int) -> Sp::SparseMatrixCSC{Float64}\n\nCreate a symmetrizer matrix of order p for a vector of length n Magnus and Neudecker [1].\n\nArguments\n\nn::Int: The length of the vector.\np::Int: The order of the symmetrizer matrix, e.g., p = 2 for x ⊗ x.\n\nOutput\n\nSp::SparseMatrixCSC{Float64}: The symmetrizer matrix of order p.\n\nExample\n\njulia> symmtzrmat(2,2)\n4×4 SparseMatrixCSC{Float64, Int64} with 6 stored entries:\n 1.0   ⋅    ⋅    ⋅ \n  ⋅   0.5  0.5   ⋅\n  ⋅   0.5  0.5   ⋅\n  ⋅    ⋅    ⋅   1.0\n\n\n\n\n\n","category":"function"},{"location":"matrices/symmetrizer/#Use-Cases","page":"Symmetrizer Matrix","title":"Use Cases","text":"","category":"section"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"The symmetrizer matrix is particularly useful in the following contexts:","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"Symmetrizing Kronecker Products:\nWhen dealing with polynomial terms in dynamical systems, it's often necessary to ensure that the terms are symmetric. The symmetrizer matrix averages all permutations of indices in the Kronecker product to produce a symmetric tensor.\nExample:\nFor mathbfx in mathbbR^n and p = 2:\nmathbfx^2 = mathbfS_n2 (mathbfx otimes mathbfx)\nThis results in a vector containing terms like x_i x_j averaged over all permutations.\nEnsuring Symmetric Operators:\nIn polynomial dynamical systems, operators (matrices) that act on Kronecker powers of state vectors should often be symmetric to preserve certain properties like stability. The symmetrizer matrix can be used to enforce symmetry in these operators.\nDuplicating Symmetric Coefficients:\nWhen converting between unique and redundant representations of polynomial operators, the symmetrizer matrix ensures that coefficients are duplicated symmetrically, maintaining the symmetry of the operator.","category":"page"},{"location":"matrices/symmetrizer/","page":"Symmetrizer Matrix","title":"Symmetrizer Matrix","text":"duplicate_symmetric","category":"page"},{"location":"uniquekronecker/higherorder/#Unique-Kronecker-Powers","page":"Higher Order","title":"Unique Kronecker Powers","text":"","category":"section"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"One unique feature of this package is the generalization of the unique Kronecker product for any n-dimensional vector with any Kronecker product of order k. This allows significant computational efficiency in higher-order polynomial systems.","category":"page"},{"location":"uniquekronecker/higherorder/#Definition","page":"Higher Order","title":"Definition","text":"","category":"section"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"The unique Kronecker power of order k of a vector mathbfx in mathbbR^n, denoted by mathbfx^langle k rangle, is a vector containing all the unique monomials of degree k formed by the elements of mathbfx. Unlike the standard Kronecker power mathbfx^k, which includes all possible combinations (including duplicates due to commutativity), the unique Kronecker power includes each distinct monomial only once.","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"Formally, the unique Kronecker power is defined as:","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"mathbfx^langle k rangle = mathrmvec_textunique left( mathbfx^k right) in mathbbR^tbinomn + k - 1k","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"where:","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"the term mathbfx^k = underbracemathbfx otimes mathbfx otimes cdots otimes mathbfx_k text times is the k-th Kronecker power of mathbfx.\nand mathrmvec_textunique extracts only the unique monomials, considering that the variables commute (e.g., x_i x_j = x_j x_i).","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"The length of mathbfx^langle k rangle is given by the multiset coefficient (number of combinations with repetition):","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"mathrmlength(mathbfx^langle k rangle) = tbinomn + k - 1k","category":"page"},{"location":"uniquekronecker/higherorder/#Properties","page":"Higher Order","title":"Properties","text":"","category":"section"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"Efficiency: By considering only unique monomials, the unique Kronecker power significantly reduces the dimensionality compared to the standard Kronecker power, which has length n^k.\nSymmetry: The unique Kronecker power leverages the commutative property of multiplication, avoiding redundant terms.\nPolynomial Representation: Each element corresponds to a unique monomial of degree k in the variables x_1 x_2 dots x_n.","category":"page"},{"location":"uniquekronecker/higherorder/#Computation","page":"Higher Order","title":"Computation","text":"","category":"section"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"To compute the unique Kronecker power of a vector mathbfx, generate all combinations of indices with replacement and compute the products corresponding to those combinations.","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"Example for n = 2 and k = 2:","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"Let mathbfx = x_1 x_2^top. The unique Kronecker power is:","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"mathbfx^langle 2 rangle = beginbmatrix x_1^2  x_1 x_2  x_2^2 endbmatrix","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"Example for n = 3 and k = 2:","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"mathbfx^langle 2 rangle = beginbmatrix x_1^2  x_1 x_2  x_1 x_3  x_2^2  x_2 x_3  x_3^2 endbmatrix","category":"page"},{"location":"uniquekronecker/higherorder/#Conversion-Between-Standard-and-Unique-Kronecker-Powers","page":"Higher Order","title":"Conversion Between Standard and Unique Kronecker Powers","text":"","category":"section"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"The package provides tools to convert between the standard Kronecker power mathbfx^k and the unique Kronecker power mathbfx^langle k rangle using the elimination matrix mathbfL_nk and the duplication matrix mathbfD_nk.","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"From Standard to Unique:","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"mathbfx^langle k rangle = mathbfL_nk mathbfx^k","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"From Unique to Standard:","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"mathbfx^k = mathbfD_nk mathbfx^langle k rangle","category":"page"},{"location":"uniquekronecker/higherorder/","page":"Higher Order","title":"Higher Order","text":"UniqueKronecker.UniqueCombinationIterator","category":"page"},{"location":"uniquekronecker/higherorder/#UniqueKronecker.UniqueCombinationIterator","page":"Higher Order","title":"UniqueKronecker.UniqueCombinationIterator","text":"CombinationIterator(n::Int, p::Int)\n\nIterator for generating all combinations with repetition of n elements from {1, 2, ..., n}.\n\nFields\n\nn::Int: number of elements\np::Int: number of elements in each combination\n\n\n\n\n\n","category":"type"},{"location":"matrices/commutation/#Commutation-Matrix","page":"Commutation Matrix","title":"Commutation Matrix","text":"","category":"section"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"The commutation matrix mathbfK is a special permutation matrix that rearranges the vectorization of matrices and interchanges the Kronecker products of vectors and matrices. It plays a crucial role in simplifying expressions involving vectorization and Kronecker products in linear algebra, control theory, and other mathematical fields.","category":"page"},{"location":"matrices/commutation/#Definition","page":"Commutation Matrix","title":"Definition","text":"","category":"section"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"The Commutation Matrix mathbfK_mn in mathbbR^mn times mn is defined as:","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"mathbfK_mn = sum_i=1^m sum_j=1^n mathbfE_ij otimes mathbfE_ji","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"where mathbfE_ij is the elementary matrix of size m times n with a one in the (i j)-th position and zeros elsewhere.","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"Properties of the Commutation Matrix:","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"Vectorization Transposition:\nFor any matrix mathbfA in mathbbR^m times n:\nmathbfK_mn operatornamevec(mathbfA) = operatornamevec(mathbfA^top)\nThis property states that the commutation matrix transforms the vectorization of a matrix into the vectorization of its transpose.\nKronecker Product Permutation:\nFor matrices mathbfA in mathbbR^m times n and mathbfB in mathbbR^p times q:\nmathbfK_p m n q (mathbfA otimes mathbfB) mathbfK_n q = mathbfB otimes mathbfA\nThis property allows interchanging matrices within a Kronecker product.\nVector Kronecker Product Permutation:\nFor vectors mathbfv in mathbbR^m and mathbfw in mathbbR^n:\nmathbfK_nm (mathbfv otimes mathbfw) = mathbfw otimes mathbfv\nThis property enables swapping vectors within a Kronecker product.","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"Additional Properties:","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"Symmetry: mathbfK_nm = mathbfK_mn^top.\nInvolution: mathbfK_mn mathbfK_nm = mathbfI_mn, where mathbfI_mn is the identity matrix of size mn times mn.\nEigenvalues: The eigenvalues of mathbfK_mn are either +1 or -1.","category":"page"},{"location":"matrices/commutation/#Use-Cases","page":"Commutation Matrix","title":"Use Cases","text":"","category":"section"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"The commutation matrix is particularly useful in the following contexts:","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"Rearranging Kronecker Products:\nThe commutation matrix allows us to move matrices or vectors within Kronecker products. For example:\nmathbfK_nn^2 (mathbfA mathbfx otimes mathbfx otimes mathbfx) = mathbfx otimes mathbfA mathbfx otimes mathbfx\nmathbfK_n^2n (mathbfA mathbfx otimes mathbfx otimes mathbfx) = mathbfx otimes mathbfx otimes mathbfA mathbfx\nHere, mathbfx in mathbbR^n and mathbfA in mathbbR^n times n.\nSimplifying Vectorized Equations:\nIn mathematical modeling, especially in statistics and econometrics, the commutation matrix simplifies expressions involving vectorized matrices.\nMatrix Derivatives:\nIt is used in deriving matrix derivatives where the order of differentiation and vectorization matters.\nPermutation of Tensor Products:\nIn higher-order tensor computations, the commutation matrix helps in permuting indices.\nConstruct second-order symmetrizer matrix\nFor the second-order Kronecker product, the symmetrizer matrix is defined by","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"   mathbfS_2 = frac12(mathbfI_n^2 + mathbfK_nn) ","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"See more details on the symmetrizer matrix.","category":"page"},{"location":"matrices/commutation/","page":"Commutation Matrix","title":"Commutation Matrix","text":"commat","category":"page"},{"location":"matrices/commutation/#UniqueKronecker.commat","page":"Commutation Matrix","title":"UniqueKronecker.commat","text":"commat(m::Int, n::Int) → K\n\nCreate commutation matrix K of dimension m x n Magnus and Neudecker [1].\n\nArguments\n\nm::Int: row dimension of the commutation matrix\nn::Int: column dimension of the commutation matrix\n\nReturns\n\nK: commutation matrix\n\nExample\n\njulia> commat(2,2)\n4×4 SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n 1.0   ⋅    ⋅    ⋅\n  ⋅    ⋅   1.0   ⋅\n  ⋅   1.0   ⋅    ⋅ \n  ⋅    ⋅    ⋅   1.0\n\n\n\n\n\ncommat(m::Int) → K\n\nDispatch for the commutation matrix of dimensions (m, m)\n\nArguments\n\nm::Int: row and column dimension of the commutation matrix\n\nReturns\n\nK: commutation matrix\n\n\n\n\n\n","category":"function"},{"location":"matrices/dynamicalsystem/#Polynomial-Dynamical-System","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"","category":"section"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"The main use case of the unique Kronecker product is in a polynomial structured dynamical systems defined by","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    dotmathbfx(t) = mathbfAmathbfx(t) + mathbfA_2mathbfx^2(t) + mathbfA_3mathbfx^3(t) + cdots ","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"where mathbfx is the system variable and mathbfA_2inmathbbR^ntimes n^2, mathbfA_3inmathbbR^n^3 are the system matrices/operators. This can be represented using the unique Kronecker product as ","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    dotmathbfx(t) = mathbfAmathbfx(t) + mathbfA_2umathbfx^langle 2 rangle(t) + mathbfA_3umathbfx^langle 3 rangle(t) + cdots  ","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"where mathbfA_2uinmathbbR^n(n+1)2 and mathbfA_3uinmathbbR^n(n+1)(n+2)6. This package is also dedicated to converting between the unique operators mathbfA_2umathbfA_3u and non-unique operators mathbfA_2mathbfA_3. ","category":"page"},{"location":"matrices/dynamicalsystem/#Creating-the-Polynomial-Operators","page":"Polynomial Dynamical System","title":"Creating the Polynomial Operators","text":"","category":"section"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"This packages offers a built-in function that allows the construction of redundant and non-redundant polynomial operators generalized for the dimension of the system variable and order of the Kronecker product. This function is called makePolyOp which easily creates the matrices by accepting the indices and values as arguments.","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"makePolyOp","category":"page"},{"location":"matrices/dynamicalsystem/#UniqueKronecker.makePolyOp","page":"Polynomial Dynamical System","title":"UniqueKronecker.makePolyOp","text":"makePolyOp(n::Int, inds::AbstractArray{<:NTuple{P,<:Int}}, vals::AbstractArray{<:Real}; \n                nonredundant::Bool=true, symmetric::Bool=true) where P\n\nHelper function to construct the polynomial operator from the indices and values. The indices must be a 1-dimensional array of, e.g., tuples of the form (i,j) where i,j are the indices of the polynomial term. For example, for the polynomial term 25x_1x_2 for dotx_3 would have an index of (1,2,3) with a value of 2.5. The nonredundant argument specifies which polynomial operator to construct (the redundant or non-redundant operator). Note that the values must be a 1-dimensional array of the same length as the indices. The symmetric argument specifies whether to construct the operator with symmetric coefficients.\n\nArguments\n\nn::Int: dimension of the polynomial operator\ninds::AbstractArray{<:NTuple{P,<:Int}}: indices of the polynomial term\nvals::AbstractArray{<:Real}: values of the polynomial term\nnonredundant::Bool=true: whether to construct the non-redundant operator\nsymmetric::Bool=true: whether to construct the symmetric operator\n\nReturns\n\nthe polynomial operator\n\n\n\n\n\n","category":"function"},{"location":"matrices/dynamicalsystem/#Example","page":"Polynomial Dynamical System","title":"Example","text":"","category":"section"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"Here we show some famous systems which possess the polynomial structure:","category":"page"},{"location":"matrices/dynamicalsystem/#Van-der-Pol-Oscillator","page":"Polynomial Dynamical System","title":"Van der Pol Oscillator","text":"","category":"section"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"The Van der Pol oscillator is a nonlinear system that exhibits self-sustained oscillations with non-constant amplitude and frequency. It is governed by the second-order differential equation:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    ddotx - mu (1 - x^2) dotx + x = 0","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"where x is the state variable and mu is a scalar parameter representing the nonlinearity and damping of the system.","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"To express this as a first-order system suitable for the polynomial dynamical system framework, we define the state vector mathbfx = x_1 x_2^T, where x_1 = x and x_2 = dotx. The system then becomes:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"beginaligned\n    dotx_1 = x_2 \n    dotx_2 = mu (1 - x_1^2) x_2 - x_1\nendaligned","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"This can be rewritten in matrix form as:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    dotmathbfx = mathbfA mathbfx + mathbfA_3u mathbfx^langle 3 rangle","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"Here, the matrices are defined as:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"Linear term:\n    mathbfA = beginbmatrix\n        0  1 \n        -1  mu\n    endbmatrix\nCubic term:\n    mathbfA_3u = beginbmatrix\n        0  0  0  0 \n        0  -mu  0  0\n    endbmatrix","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"The cubic term arises from the - mu x_1^2 x_2 component, which can be represented using the unique Kronecker product:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    mathbfx^langle 3 rangle = x_1^3x_1^2 x_2 x_1 x_2^2 x_2^3^top","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"Thus, the Van der Pol oscillator fits into the polynomial dynamical system framework by capturing its nonlinear dynamics through the unique Kronecker product, facilitating analysis and simulation.","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"tip: Tip\nUniqueKronecker.jl provides a convenient function to construct the polynomial operators called makePolyOp. For example, you can construct the (redundant) cubic operator using the following command:using UniqueKronecker: makePolyOp\nμ = 1.0\nA3 = makePolyOp(2, [(1,1,2,2)], [μ])","category":"page"},{"location":"matrices/dynamicalsystem/#Lorenz-System","page":"Polynomial Dynamical System","title":"Lorenz System","text":"","category":"section"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"The Lorenz system is a set of three coupled, nonlinear differential equations originally developed to model atmospheric convection. It is famous for its chaotic solutions for certain parameter values. The system is given by:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"beginaligned\n    dotx_1 = sigma (x_2 - x_1) \n    dotx_2 = x_1 (rho - x_3) - x_2 \n    dotx_3 = x_1 x_2 - beta x_3\nendaligned","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"where x_1, x_2, and x_3 are the state variables, and sigma, rho, and beta are parameters.","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"To express the Lorenz system within the polynomial dynamical system framework, we identify the nonlinear terms and represent them using the unique Kronecker product:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"Quadratic terms: x_1 x_2, x_1 x_3","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"We define the state vector mathbfx = x_1 x_2 x_3^top and compute the unique Kronecker powers:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    mathbfx^langle 2 rangle = x_1^2 x_1 x_2 x_1 x_3 x_2^2 x_2 x_3 x_3^2^top","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"The system can then be represented as:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    dotmathbfx = mathbfA mathbfx + mathbfA_2u mathbfx^langle 2 rangle","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"Where:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"Linear term:\n    mathbfA = beginbmatrix\n        -sigma  sigma  0 \n        rho  -1  0 \n        0  0  -beta\n    endbmatrix\nQuadratic term:\n    mathbfA_2u = beginbmatrix\n        0  0  0  0  0  0 \n        0  0  -1  0  0  0 \n        0  1  0  0  0  0\n    endbmatrix","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"In this form, the Lorenz system's nonlinear dynamics are captured using the unique Kronecker product, making it amenable to analysis using polynomial system techniques.","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"tip: Tip\nThe quadratic operator can be constructed using the makePolyOp function as follows:using UniqueKronecker: makePolyOp\nA2 = makePolyOp(3, [(1,3,2), (1,2,3)], [-1, 1])","category":"page"},{"location":"matrices/dynamicalsystem/#Viscous-Burgers'-Equation","page":"Polynomial Dynamical System","title":"Viscous Burgers' Equation","text":"","category":"section"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"The viscous Burgers' equation is a fundamental partial differential equation from fluid mechanics and nonlinear acoustics. It models various physical processes like gas dynamics and traffic flow. The equation is:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    fracpartial upartial t + u fracpartial upartial x = nu fracpartial^2 upartial x^2","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"where u(x t) is the velocity field, and nu is the viscosity coefficient.","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"To convert this PDE into a finite-dimensional polynomial dynamical system, we discretize the spatial domain using methods like finite differences. Let mathbfu be the vector of discretized values of u(x t). Assuming periodic boundary condition, the discretized equation becomes:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    dotmathbfu = mathbfA mathbfu + mathbfA_2 (mathbfu otimes mathbfu)","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"Here:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"the discretized Laplacian operator (diffusion term) is repsented by mathbfA.\nand the discretized convection operator is mathbfA_2 .","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"By rearranging, we can express the nonlinear term using the unique Kronecker product:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    dotmathbfu = mathbfA mathbfu + mathbfA_2u mathbfu^langle 2 rangle","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"where:","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"    mathbfu^langle 2 rangle = u_1^2 u_1 u_2 dots u_n^2^top","category":"page"},{"location":"matrices/dynamicalsystem/","page":"Polynomial Dynamical System","title":"Polynomial Dynamical System","text":"This formulation allows us to apply polynomial system analysis tools to the viscous Burgers' equation, enabling efficient simulation and control design for systems modeled by this equation.","category":"page"},{"location":"circulantkronecker/basics/#Circulant-Kronecker-Product","page":"Circulant Kronecker Products","title":"Circulant Kronecker Product","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"The Circulant Kronecker Product is a generalized operation that extends the standard Kronecker product by summing over all cyclic permutations of the given vectors or matrices. This operation can be applied to any number of vectors or matrices.","category":"page"},{"location":"circulantkronecker/basics/#Mathematical-Definition","page":"Circulant Kronecker Products","title":"Mathematical Definition","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"Given a sequence of vectors or matrices mathbfx_1 mathbfx_2 dots mathbfx_n, the circulant Kronecker product is defined as:","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"mathbfx_1 circledast mathbfx_2 circledast dots circledast mathbfx_n = sum_k=0^n-1 mathbfx_1+k otimes mathbfx_2+k otimes dots otimes mathbfx_n+k","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"where the indices are taken modulo n, i.e., mathbfx_i+n = mathbfx_i.","category":"page"},{"location":"circulantkronecker/basics/#Implementation","page":"Circulant Kronecker Products","title":"Implementation","text":"","category":"section"},{"location":"circulantkronecker/basics/#Function-circulant_kronecker","page":"Circulant Kronecker Products","title":"Function circulant_kronecker","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"using UniqueKronecker\nx = [1, 2];\ny = [3, 4];\nz = [5, 6];\ncirculant_kronecker(x, y, z)","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"circulant_kronecker","category":"page"},{"location":"circulantkronecker/basics/#UniqueKronecker.circulant_kronecker","page":"Circulant Kronecker Products","title":"UniqueKronecker.circulant_kronecker","text":"circulant_kronecker(args::AbstractArray...)\n\nCirculant Kronecker product operation for multiple Kronecker products.\n\nArguments\n\nargs::AbstractArray...: Vectors or matrices to perform the circulant Kronecker product.\n\nReturns\n\nresult: The circulant Kronecker product.\n\n\n\n\n\n","category":"function"},{"location":"circulantkronecker/basics/#Operator","page":"Circulant Kronecker Products","title":"Operator ⊛","text":"","category":"section"},{"location":"circulantkronecker/basics/#Example-1:-Two-Vectors","page":"Circulant Kronecker Products","title":"Example 1: Two Vectors","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"using UniqueKronecker\nx = [1, 2]\ny = [3, 4]\nx ⊛ y","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"Explanation:","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"The circulant Kronecker product for two vectors is:\nmathbfx circledast mathbfy = mathbfx otimes mathbfy + mathbfy otimes mathbfx\nComputation:\nx ⊗ y = [1*3, 1*4, 2*3, 2*4] = [3, 4, 6, 8]\ny ⊗ x = [3*1, 3*2, 4*1, 4*2] = [3, 6, 4, 8]\nSum: [3+3, 4+6, 6+4, 8+8] = [6, 10, 10, 16]","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"Note: The output [6, 10, 10, 16] is the sum of the Kronecker products in this case.","category":"page"},{"location":"circulantkronecker/basics/#Example-2:-Three-Vectors","page":"Circulant Kronecker Products","title":"Example 2: Three Vectors","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"using UniqueKronecker\nx = [1, 2]\ny = [3, 4]\nz = [5, 6]\n⊛(x, y, z)","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"Explanation:","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"The circulant Kronecker product for three vectors is:\nmathbfx circledast mathbfy circledast mathbfz = mathbfx otimes mathbfy otimes mathbfz + mathbfy otimes mathbfz otimes mathbfx + mathbfz otimes mathbfx otimes mathbfy\nComputation involves computing each Kronecker product and summing the results.","category":"page"},{"location":"circulantkronecker/basics/#Example-3:-Matrices","page":"Circulant Kronecker Products","title":"Example 3: Matrices","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"using UniqueKronecker\nA = [1 2; 3 4];\nB = [5 6; 7 8];\nC = [9 10; 11 12];\nresult = ⊛(A, B, C)","category":"page"},{"location":"circulantkronecker/basics/#Generalization","page":"Circulant Kronecker Products","title":"Generalization","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"With this implementation, you can now use the ⊛ operator or circulant_kronecker function with any number of vectors or matrices. The operation will automatically handle the necessary cyclic permutations and compute the sum of their Kronecker products.","category":"page"},{"location":"circulantkronecker/basics/#Columnwise-Operation-on-Snapshot-Matrices","page":"Circulant Kronecker Products","title":"Columnwise Operation on Snapshot Matrices","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"Using the function circulant_kron_snapshot_matrix, the circulant Kronecker product operation can be applied to construct a snapshot matrix with each column containing the circulant Kronecker product result computed from each column of the input matrices. ","category":"page"},{"location":"circulantkronecker/basics/#Example","page":"Circulant Kronecker Products","title":"Example","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"using UniqueKronecker\nX1 = [1 2; 3 4]\nX2 = [5 6; 7 8]\nX3 = [9 10; 11 12]\nX = circulant_kron_snapshot_matrix(X1, X2, X3)","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"circulant_kron_snapshot_matrix","category":"page"},{"location":"circulantkronecker/basics/#UniqueKronecker.circulant_kron_snapshot_matrix","page":"Circulant Kronecker Products","title":"UniqueKronecker.circulant_kron_snapshot_matrix","text":"circulant_kron_snapshot_matrix(Xmat::AbstractArray{T}...) where {T<:Number}\n\nCompute the circulant Kronecker product of a set of matrices, where each matrix is a snapshot matrix.\n\nArguments\n\nXmat::AbstractArray{T}...: Snapshot matrices to compute the circulant Kronecker product.\n\nReturns\n\nresult: The circulant Kronecker product of the snapshot matrices.\n\n\n\n\n\n","category":"function"},{"location":"circulantkronecker/basics/#Derivative-of-Kronecker-products","page":"Circulant Kronecker Products","title":"Derivative of Kronecker products","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"This circulant Kronecker product is useful because it is a well-known result that the derivative of Kronecker products hold the circulant Kronecker structure. For example, if mathbfxinmathbbR^2 then","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"fracpartialpartial mathbfx(mathbfx otimes mathbfx) = mathbfI_2 otimes mathbfx + mathbfx otimes mathbfI_2","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"and ","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"fracpartialpartial mathbfx(mathbfx otimes mathbfx otimes mathbfx) = mathbfI_2 otimes mathbfx otimes mathbfx + mathbfx otimes mathbfI_2 otimes mathbfx + mathbfx otimes mathbfx otimes mathbfI_2","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"which can be reformulated using the circulant Kronecker product as, e.g.,","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"fracpartialpartial mathbfx(mathbfx otimes mathbfx) = mathbfI_2 circledast mathbfx","category":"page"},{"location":"circulantkronecker/basics/#Symmetry-and-Conversion-using-Elimination-and-Duplication-Matrices","page":"Circulant Kronecker Products","title":"Symmetry and Conversion using Elimination and Duplication Matrices","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"The circulant Kronecker product inherently captures the symmetric structure present in Kronecker products involving permutations of vectors or matrices. This symmetry can be leveraged to simplify computations, reduce redundancy, and improve efficiency in mathematical operations, particularly when dealing with higher-order tensors or polynomial systems.","category":"page"},{"location":"circulantkronecker/basics/#Role-of-Elimination-and-Duplication-Matrices","page":"Circulant Kronecker Products","title":"Role of Elimination and Duplication Matrices","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"When working with circulant Kronecker products, especially in the context of symmetric tensors or polynomial dynamical systems, you may need to convert between the full Kronecker product and its unique representation.","category":"page"},{"location":"circulantkronecker/basics/#From-Full-Kronecker-Product-to-Unique-Representation","page":"Circulant Kronecker Products","title":"From Full Kronecker Product to Unique Representation","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"Compute the Full Circulant Kronecker Product: Use the circulant_kronecker function to compute the sum over all cyclic permutations.\nApply the Elimination Matrix: Multiply the result by the elimination matrix mathbfL_nk to extract the unique elements.\ntextUnique Elements = mathbfL_nk left( mathbfx_1 circledast mathbfx_2 circledast dots circledast mathbfx_n right)","category":"page"},{"location":"circulantkronecker/basics/#From-Unique-Representation-to-Full-Kronecker-Product","page":"Circulant Kronecker Products","title":"From Unique Representation to Full Kronecker Product","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"Start with Unique Elements: Obtain the vector containing the unique monomials.\nApply the Duplication Matrix: Multiply the unique elements by the duplication matrix mathbfD_nk to reconstruct the full symmetric tensor.\ntextFull Kronecker Product = mathbfD_nk times textUnique Elements","category":"page"},{"location":"circulantkronecker/basics/#Example-2","page":"Circulant Kronecker Products","title":"Example","text":"","category":"section"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"Consider vectors mathbfx mathbfy in mathbbR^2:","category":"page"},{"location":"circulantkronecker/basics/","page":"Circulant Kronecker Products","title":"Circulant Kronecker Products","text":"Compute the Circulant Kronecker Product:\nmathbfx circledast mathbfy = mathbfx otimes mathbfy + mathbfy otimes mathbfx\nApply the Elimination Matrix:\nUse the elimination matrix mathbfL_22 to extract unique terms:\ntextUnique Elements = mathbfL_22 (mathbfx circledast mathbfy)\nResult:\nThe unique elements correspond to the monomials x_1 y_1, x_1 y_2 + x_2 y_1, and x_2 y_2.","category":"page"},{"location":"#UniqueKronecker.jl","page":"Home","title":"UniqueKronecker.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"UniqueKronecker.jl is a Julia package for computing non-redundant (unique) Kronecker products of vectors, generalizing to n dimensions and k-repeated products. It provides utility functions to work with the associated coefficient matrices, enabling conversions between unique Kronecker products and their standard (possibly redundant) Kronecker counterparts.","category":"page"},{"location":"#What-is-the-Unique-Kronecker-Product?","page":"Home","title":"What is the Unique Kronecker Product?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The standard Kronecker product of a vector x in mathbbR^n with itself, textkron(x x) = x otimes x, produces all possible pairwise products of its elements, resulting in redundant terms when x_i x_j = x_j x_i.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The unique Kronecker product, denoted here as x^langle k rangle = x oslash x, eliminates these redundancies by considering only unique combinations of indices. For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"For mathbfx in mathbbR^2:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Standard Kronecker product:","category":"page"},{"location":"","page":"Home","title":"Home","text":"  mathbfx otimes mathbfx = beginbmatrix x_1^2  x_1 x_2  x_2 x_1  x_2^2 endbmatrix","category":"page"},{"location":"","page":"Home","title":"Home","text":"Unique Kronecker product:","category":"page"},{"location":"","page":"Home","title":"Home","text":"  mathbfx oslash mathbfx = beginbmatrix x_1^2  x_1 x_2  x_2^2 endbmatrix","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here, x_1 x_2 and x_2 x_1 are considered the same and included only once.","category":"page"},{"location":"#Coefficient-Matrices","page":"Home","title":"Coefficient Matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package provides functions to compute the associated coefficient matrices:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Polynomial Matrix mathbfA_2u in mathbbR^n times fracn(n+1)2: Represents the mapping of the unique Kronecker product back to the original vector xinmathbbR^2.\nKronecker Coefficient Matrix mathbfA_2 in mathbbR^n times n^2: Relates the unique Kronecker product to the standard Kronecker product, including coefficients for redundant terms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"These matrices are useful for applications in polynomial regression, symmetric tensor computations, and vectorization of symmetric matrices.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Compute the unique Kronecker product for vectors of any dimension n and any repeated (Kronecker) order k.\nGenerate the associated polynomial and Kronecker coefficient matrices mathbfA_2u and mathbfA_2.\nConvert between unique and standard Kronecker products.\nUtility functions for polynomial modeling and symmetric tensor operations.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install it using the command","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"UniqueKronecker\")\nusing UniqueKronecker","category":"page"},{"location":"","page":"Home","title":"Home","text":"or install it directly from GitHub:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/YourUsername/UniqueKronecker.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Replace YourUsername with the actual GitHub username or organization where the package is hosted.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#Importing-the-Package","page":"Home","title":"Importing the Package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using UniqueKronecker","category":"page"},{"location":"#Computing-the-Unique-Kronecker-Product","page":"Home","title":"Computing the Unique Kronecker Product","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Compute the k-th order unique Kronecker product of vector x:","category":"page"},{"location":"","page":"Home","title":"Home","text":"x = [2.0, 3.0, 4.0]  # Example vector in ℝ³\n\nx_unique_kron =  x ⊘ x \nprintln(x_unique_kron)\n# Output: [4.0, 6.0, 8.0, 9.0, 12.0, 16.0]\n# Corresponding to [x₁², x₁x₂, x₁x₃, x₂², x₂x₃, x₃²]","category":"page"},{"location":"#Computing-Coefficient-Matrices","page":"Home","title":"Computing Coefficient Matrices","text":"","category":"section"},{"location":"#Polynomial-Matrix-H","page":"Home","title":"Polynomial Matrix H","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Compute the polynomial coefficient matrix H:","category":"page"},{"location":"","page":"Home","title":"Home","text":"n = 3\nH = zeros(n,n^2)\nfor i in 1:n\n    x = rand(n)\n    H[i,:] = kron(x,x)\nend\n\nprintln(H)\n# Output: A matrix of size (3, 9) for this example","category":"page"},{"location":"#Unique/Nonredundant-Polynomial-Coefficient-Matrix-F","page":"Home","title":"Unique/Nonredundant Polynomial Coefficient Matrix F","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Convert the polynomial matrix H into the unique polynomial coefficient matrix F:","category":"page"},{"location":"","page":"Home","title":"Home","text":"F = eliminate(H, 2)\n\nprintln(F)\n# Output: A matrix of size (3, 6) for this example","category":"page"},{"location":"","page":"Home","title":"Home","text":"This can be converted back","category":"page"},{"location":"","page":"Home","title":"Home","text":"H = duplicate(F, 2)\nprintln(H)\n# Output: the H matrix","category":"page"},{"location":"","page":"Home","title":"Home","text":"To make the coefficients symmetric for redundant terms use duplicate_symmetric","category":"page"},{"location":"","page":"Home","title":"Home","text":"Hs = duplicate_symmetric(F, 2)\nprintln(Hs)\n# Output: the H matrix with symmetric coefficients","category":"page"},{"location":"#Relationship-Between-Matrices","page":"Home","title":"Relationship Between Matrices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following relationship holds:","category":"page"},{"location":"","page":"Home","title":"Home","text":"F cdot (x oslash x) = H cdot (x otimes x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This allows mapping between the unique Kronecker product space and the standard Kronecker product space.","category":"page"},{"location":"#Generalizing-to-Higher-Order-Products","page":"Home","title":"Generalizing to Higher-Order Products","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Compute higher-order unique Kronecker products by specifying a higher value of k:","category":"page"},{"location":"","page":"Home","title":"Home","text":"k = 3  # Third-order product\n\nx_unique_kron_k3 = unique_kronecker(x, k)  # or ⊘(x,k)\n\nprintln(x_unique_kron_k3)\n# Output: Corresponding unique products of order 3","category":"page"},{"location":"#Applications","page":"Home","title":"Applications","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Polynomial Regression: Efficient computation of polynomial features without redundant terms.\nSymmetric Tensor Computations: Simplifies operations involving symmetric tensors.\nStatistical Modeling: Construction of design matrices with interaction terms.\nMachine Learning: Feature engineering for higher-order interactions.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome! If you find a bug or have a feature request, please open an issue. If you'd like to contribute code, feel free to submit a pull request.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is licensed under the MIT License.","category":"page"},{"location":"matrices/duplication/#Duplication-Matrix","page":"Duplication Matrix","title":"Duplication Matrix","text":"","category":"section"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"In the second-order Kronecker product sense, the duplication matrix mathbfD is a matrix that transforms a vector containing only the unique elements of a symmetric matrix (vectorized in half-vectorization form) into the full vectorization of the symmetric matrix, effectively duplicating the symmetric elements to their appropriate positions. It plays a crucial role in manipulating Kronecker products and converting between non-redundant and redundant polynomial operators in polynomial dynamical systems.","category":"page"},{"location":"matrices/duplication/#Definition","page":"Duplication Matrix","title":"Definition","text":"","category":"section"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"The duplication matrix mathbfD_n is a unique matrix of size left(n^2 times tfracn(n+1)2right) defined such that for any symmetric matrix mathbfS in mathbbR^n times n:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"    mathrmvec(mathbfS) = mathbfD_n mathrmvech(mathbfS)","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"where: (1) mathrmvec(mathbfS) stacks all columns of mathbfS into a single vector of length n^2; (2) mathrmvech(mathbfS) stacks only the elements on and below (or above) the main diagonal into a vector of length tfracn(n+1)2.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"The duplication matrix effectively \"duplicates\" the unique elements in mathrmvech(mathbfS) to fill the positions in mathrmvec(mathbfS) that correspond to symmetric entries.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Properties of the Duplication Matrix:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Construction: Each column of mathbfD_n contains ones at positions corresponding to the symmetric elements in operatornamevec(mathbfS) and zeros elsewhere.\nRelation to Elimination Matrix: The duplication matrix is related to the elimination matrix mathbfL_n via:\n    mathbfL_nmathbfD_n = mathbfI_n","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"for more definitions see Magnus and Neudecker [1].","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"note: Note\nSimilar to the elimination matrix, this matrix is not formally/mathematically generalized for higher-order Kronecker products in the literature.","category":"page"},{"location":"matrices/duplication/#Converting-Between-Kronecker-Products","page":"Duplication Matrix","title":"Converting Between Kronecker Products","text":"","category":"section"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"In polynomial dynamical systems, Kronecker powers of vectors often involve redundancy due to symmetric terms. The duplication matrix facilitates the conversion from the unique Kronecker product vector to the standard Kronecker product vector.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Unique Kronecker Power:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Given a vector mathbfx in mathbbR^n, the unique Kronecker power is:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"    mathbfx^langle k rangle in mathbbR^tbinomn + k - 1k","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"which contains only the unique monomials of degree k.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Standard Kronecker Power:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"The standard Kronecker power is:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"    mathbfx^k = underbracemathbfx otimes mathbfx otimes cdots otimes mathbfx_k text times in mathbbR^n^k","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"which includes all possible combinations, including redundant terms.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Conversion Using the Duplication Matrix:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"The duplication matrix mathbfD_nk of order k is used to expand the unique Kronecker power to the standard Kronecker power:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"    mathbfx^k = mathbfD_nk mathbfx^langle k rangle","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Here, mathbfD_nk is a matrix of size left(n^k times tbinomn + k - 1kright).","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Example:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"For n = 2 and k = 2, let mathbfx = x_1 x_2^top. Then:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Unique Kronecker Power:\n    mathbfx^langle 2 rangle = x_1^2 x_1 x_2 x_2^2^top\nStandard Kronecker Power:\n    mathbfx^2 = x_1^2 x_1 x_2 x_2 x_1 x_2^2^top","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"The duplication matrix mathbfD_22 duplicates the mixed term x_1 x_2 to account for both x_1 x_2 and x_2 x_1 in the standard Kronecker power:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"    mathbfx^2 = mathbfD_22 mathbfx^langle 2 rangle","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Note on Julia Implementation:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"The Julia function dupmat(n::Int, p::Int) generates the duplication matrix of order p for vectors of length n. This function can be used to create the duplication matrix needed for converting unique Kronecker products to standard ones.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"dupmat","category":"page"},{"location":"matrices/duplication/#UniqueKronecker.dupmat","page":"Duplication Matrix","title":"UniqueKronecker.dupmat","text":"dupmat(n::Int, p::Int) -> Dp::SparseMatrixCSC{Int}\n\nCreate a duplication matrix of order p for a vector of length n Magnus and Neudecker [1].\n\nArguments\n\nn::Int: The length of the vector.\np::Int: The order of the duplication matrix, e.g., p = 2 for x ⊗ x.\n\nOutput\n\nDp::SparseMatrixCSC{Int}: The duplication matrix of order p.\n\nExample\n\njulia> dupmat(2,2)\n4×3 SparseMatrixCSC{Int64, Int64} with 4 stored entries:\n 1  ⋅  ⋅\n ⋅  1  ⋅\n ⋅  1  ⋅\n ⋅  ⋅  1\n\n\n\n\n\n","category":"function"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Benefits:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Expands Unique Terms: Allows reconstruction of the full Kronecker power from the unique monomials.\nSimplifies Computations: Facilitates operations that require the full Kronecker power.","category":"page"},{"location":"matrices/duplication/#Converting-Between-Operators","page":"Duplication Matrix","title":"Converting Between Operators","text":"","category":"section"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"The duplication matrix is also instrumental in converting between non-redundant (unique) and redundant polynomial operators in dynamical systems.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Unique Operators:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"In the polynomial dynamical system:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"    dotmathbfx(t) = mathbfA mathbfx(t) + mathbfA_2u mathbfx^langle 2 rangle(t) + mathbfA_3u mathbfx^langle 3 rangle(t) + cdots","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"the matrices mathbfA_ku in mathbbR^n times tbinomn + k - 1k operate on the unique Kronecker powers.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Redundant Operators:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Alternatively, using the standard Kronecker powers:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"    dotmathbfx(t) = mathbfA mathbfx(t) + mathbfA_2 mathbfx^2(t) + mathbfA_3 mathbfx^3(t) + cdots","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"with mathbfA_k in mathbbR^n times n^k.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"Conversion Using the Duplication Matrix:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"The unique operator mathbfA_ku and the redundant operator mathbfA_k are related through the duplication matrix:","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"    mathbfA_ku = mathbfA_k mathbfD_nk","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"which eliminates the redundant terms.","category":"page"},{"location":"matrices/duplication/","page":"Duplication Matrix","title":"Duplication Matrix","text":"eliminate","category":"page"},{"location":"matrices/duplication/#UniqueKronecker.eliminate","page":"Duplication Matrix","title":"UniqueKronecker.eliminate","text":"eliminate(A::AbstractArray, p::Int)\n\nEliminate the redundant polynomial coefficients in the matrix A and return the matrix  with unique coefficients.\n\nArguments\n\nA::AbstractArray: A matrix\np::Int: The order of the polynomial, e.g., p = 2 for x ⊗ x.\n\nReturns\n\nmatrix with unique coefficients\n\nExample\n\njulia> n = 2; P = rand(n,n); P *= P'; p = vec(P)\n4-element Vector{Float64}:\n 0.5085988756090203\n 0.7704767970682769\n 0.7704767970682769\n 1.310279680309927\n\njulia> Q = rand(n,n); Q *= Q'; q = vec(Q)\n4-element Vector{Float64}:\n 0.40940214810208353\n 0.2295272821417254\n 0.2295272821417254\n 0.25503767587483905\n\njulia> A2 = [p'; q']\n2×4 Matrix{Float64}:\n 0.257622  0.44721   0.0202203  0.247649\n 1.55077   0.871029  0.958499   0.650717\n\njulia> eliminate(A2, 2)\n2×3 Matrix{Float64}:\n 0.508599  1.54095   1.31028\n 0.409402  0.459055  0.255038\n\n\n\n\n\n","category":"function"}]
}
